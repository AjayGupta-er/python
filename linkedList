class Node:
    def __init__(self,data):
        self.data=data
        self.next = None

class linkedList:
    def __init__(self): 
        self.head = None
    def insert_beg(self, num):
        newNode = Node(num)
        temp = self.head
        self.head = newNode
        newNode.next = temp
        return (self.head)
    def insert_end(self,num):
        newNode = Node(num)
        if self.head == None:
            self.head = newNode
            return(self.head)
        else:
            temp = self.head
            while temp.next != None:
                temp = temp.next
            temp.next = newNode
            return (self.head)
    def insert_pos(self, prev, num):
        newNode = Node(num)
        if prev.next == None:
            self.head = newNode
            return (self.head)
        else:
            temp = self.head
            while temp.next != prev:
                temp = temp.next
            newNode.next = prev.next
            prev.next = newNode
            return(self.head)
    def printList(self): 
        temp = self.head 
        while (temp): 
            print(temp.data) 
            temp = temp.next

    def printListEnd(self, node):
        if node is None:
            print
            return
        self.printListEnd(node.next)
        print(node.data)
        #if self.head.next == None:
        #    print
        #    return
        #self.head = self.head.next
        #self.printListEnd()
        #print(self.head.data)
            
    def delete_beg(self):
        if self.head == None:
            print('No element to delete')
            return
        else:
            temp = self.head
            self.head = temp.next
            return(self.head)
    def delete_end(self):
        if self.head == None:
            print('No element to delete')
            return None
        elif self.head.next == None:
            self.head = None
            return self.head
        else:
            temp = self.head
            while temp.next.next != None:
                temp = temp.next
            temp.next = None
            return(self.head)
    def delete_pos(self, prev, pos):
        if self.head == None:
            print('No element to delete')
            return None
        elif (self.head.next == None) and (pos != 0):
            return None
        else:
            temp = self.head
            cur = 0
            for i in range(pos-1):
                temp = temp.next
                #prev = prev.next
                print(cur, pos)
                cur = cur+1
                if temp.next == None:
                    break
            if cur == pos-1:
                temp.next = temp.next.next
                #prev.next = temp.next
                return(self.head)
            else:
                print("No element found for position {}".format(pos))
                return None
            
    def reverse(self):
        prev = None
        temp = self.head
        while(temp != None):
            nextt = temp.next
            temp.next = prev
            prev = temp
            temp = nextt
        self.head = prev
        return(self.head)
                
        
        
if __name__ == "__main__":
    llist = linkedList()
    llist.head = Node(1)
    second  = Node(2)
    third = Node(3)
    llist.head.next = second
    second.next = third
    llist.insert_beg(5)
    llist.insert_beg(6)
    llist.insert_end(8)
    llist.insert_end(9)
    llist.reverse()
    llist.printList()
    llist.printListEnd(llist.head)
