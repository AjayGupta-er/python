# Given a binary tree and a number, return true if the tree has a root-to-leaf path
# such that adding up all the values along the path equals the given number. Return false if no such path can be found.

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
class Solution:
    def tree(self, root, tsum):
        return self.tree_helper(root, tsum)
   
    def tree_helper(self, node, tsum):
        if node is None:
            return False
        if node.left is None and node.right is None:
            if abs(node.data-tsum) == 0:
                return True
        if node.left is not None:
            if self.tree_helper(node.left, abs(node.data - tsum)):
                return True
        if node.right is not None:
            if self.tree_helper(node.right, abs(node.data-tsum)):
                return True
        return False

if __name__ == "__main__":
    root = Node(10)
    root.left = Node(8)
    root.right = Node(2)
    root.left.right = Node(5)
    root.left.left = Node(3)
    root.right.left = Node(2)
    solve = Solution()
    print(solve.tree(root, 23))
    print(solve.tree(root, 2))
    print(solve.tree(root, 21))
    print(solve.tree(root, 50))
